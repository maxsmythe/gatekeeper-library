variables:
- name: containers
  expression: 'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []'
- name: initContainers
  expression: 'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []'
- name: ephemeralContainers
  expression: 'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []'
- name: allContainers
  expression: 'variables.containers + variables.initContainers + variables.ephemeralContainers'
- name: podAppArmor
  expression: 'has(variables.anyObject.spec.securityContext) && has(variables.anyObject.spec.securityContext.appArmorProfile) ? variables.anyObject.spec.securityContext.appArmorProfile : null'
- name: canonicalPodAppArmor
  expression: |
    variables.podAppArmor == null ? "runtime/default" : 
      variables.podAppArmor.type == "RuntimeDefault" ? "runtime/default" :
        variables.podAppArmor.type == "Unconfined" ? "unconfined" : 
          variables.podAppArmor.type == "Localhost" ? "localhost/" + variables.podAppArmor.localhostProfile : ""
- name: appArmorByContainer
  expression: |
    variables.allContainers.map(container, [container.name,
      has(container.securityContext) && has(container.securityContext.appArmorProfile) ?
        (container.securityContext.appArmorProfile.type == "RuntimeDefault" ? "runtime/default" :
          container.securityContext.appArmorProfile.type == "Unconfined" ? "unconfined" : 
            container.securityContext.appArmorProfile.type == "Localhost" ? "localhost/" + container.securityContext.appArmorProfile.localhostProfile : "") :
        has(variables.anyObject.metadata.annotations) && has(variables.anyObject.metadata.annotations) && ("container.apparmor.security.beta.kubernetes.io/" + container.name) in variables.anyObject.metadata.annotations ?
          variables.anyObject.metadata.annotations["container.apparmor.security.beta.kubernetes.io/" + container.name] :
            variables.canonicalPodAppArmor
    ])
- name: exemptImagePrefixes
  expression: |
    !has(variables.params.exemptImages) ? [] :
      variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))
- name: exemptImageExplicit
  expression: |
    !has(variables.params.exemptImages) ? [] : 
      variables.params.exemptImages.filter(image, !image.endsWith("*"))
- name: exemptImages
  expression: |
    (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
      container.image in variables.exemptImageExplicit ||
      variables.exemptImagePrefixes.exists(exemption, string(container.image).startsWith(exemption))
    ).map(container, container.image)
validations:
- expression: |
    variables.allContainers.all(container,
      (container.image in variables.exemptImages) ||
      variables.appArmorByContainer.exists(pair, pair[0] == container.name && pair[1] in variables.params.allowedProfiles)
    )
  messageExpression: '"AppArmor profile is not allowed. Allowed Profiles: " + variables.params.allowedProfiles.join(", ")'